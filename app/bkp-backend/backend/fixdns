#!/bin/bash

#
# $Id: fixdns 758 2022-11-29 03:29:47Z glenn $
#
# Recursive/Caching Nameservers
#

# Dallas, Standard Network
nsc_dl1="72.249.191.254"
# Dallas, Premium Network
nsc_dl2="206.123.113.254"
# Reading
nsc_rdg1="185.17.252.125"
# Auckland
nsc_akl1="103.16.180.254"
# Sydney
nsc_syd1="43.239.97.254"

bad_nameservers=(
72.9.108.146
66.199.235.50
118.127.6.7
118.127.6.6
60.234.2.2
60.234.1.1
206.123.64.245
206.123.69.4
72.29.96.250
207.210.212.202
72.249.0.34
206.123.69.254
66.199.228.130
206.123.113.132
207.99.0.41
207.99.0.42
207.99.0.1
207.99.0.2
210.56.80.56
202.60.64.6
203.25.185.119
202.60.64.7
4.2.2.2
4.2.2.1
122.100.15.254
92.48.122.126
66.199.228.254
27.50.65.23
149.112.112.112
202.125.32.4
202.125.32.5
)

# Using 149.112.112.112 as a default nameserver which can be set up e.g.
# in errata but will be replaced when this script is run.

au_nameservers="$nsc_syd1 $nsc_akl1 $nsc_dl1"
ln_nameservers="$nsc_rdg1 $nsc_dl1 $nsc_dl2"
ny_nameservers="$nsc_dl1 $nsc_dl2 $nsc_rdg1"
dl_nameservers="$nsc_dl1 $nsc_dl2 $nsc_rdg1"
ak_nameservers="$nsc_akl1 $nsc_syd1 $nsc_dl1"
fr_nameservers="$nsc_rdg1 $nsc_dl1 $nsc_dl2"
google_nameservers="8.8.8.8 8.8.4.4"

ny_ranges="63. 66.199. 72.9. 216."
ln_ranges="85. 94. 217. 92. 213.229. 31. 151. 185.26. 185.17.252. 185.17.253. 185.17.254. 91.186."
fr_ranges="185.17.255. 84.200.48."
au_ranges="202. 122. 117. 101.234. 43.239. 103.52.116. 223.252."
dl_ranges="206.123. 207.210. 65.99. 72.249. 72.29. 74.50. 199.231. 199.255. 174."
ak_ranges="103.6. 103.16. 49.50. 113.21."
google_ranges=""

NIC_PRIMARY=$(ip addr show | egrep -v '^[[:space:]]|lo|vif' | grep qlen | grep -m1 'state UP' | cut -d: -f2 | sed 's/ //g')
IP_PRIMARY="$(ip -4 addr show ${NIC_PRIMARY} | grep 'inet' | head -n1 | awk '{print $2}' | cut -f1 -d'/')"
if [ -z "${IP_PRIMARY}" ]; then
  IP_PRIMARY="$(/sbin/ifconfig ${NIC_PRIMARY} | grep 'inet ' | sed 's/inet addr:/inet /' | awk '{print $2}')"
fi
if [ -z "${IP_PRIMARY}" ]; then
  echo "! Unable to determine primary interface address"
fi

# We want to deal with a few systems for specifying nameservers, namely:
#
# * Traditional, nameservers stored in static /etc/resolv.conf
# * resolveconf package in debian/ubuntu/other distros: nameservers stored
#      in /etc/network/interfaces
# * systemd (eg /etc/systemd/resolved.conf
# * netplan.io, potentiallty in ubuntu 18.04 and later: nameservers stored in
#      /etc/netplan/rimunameservers.yaml
# * perhaps other systems such as low-level systemd.networkd
#
# We set RESOLVESYS to match the system in use
RESOLVSYS=traditional
if [[ -e /etc/resolveconf ]]; then
  echo "WARN: server appears to have the resolvconf package installed, that may" >&2
  echo "      override your changes. Consider uninstalling that then reruning" >&2
  echo "      this script?" >&2
  exit 0
  RESOLVSYS=resolveconf
elif [ $(ls /etc/netplan/ 2>/dev/null|wc --words) -gt 0 ] ; then
  RESOLVSYS=netplan
elif [ -e /etc/systemd/resolved.conf ]; then
  # systemd is present, but it will honour a static resolv.conf, before using its own values
  if [ ! -f /etc/resolv.conf ]; then
    RESOLVSYS=systemd
  fi
fi


echo "Using $RESOLVSYS resolver configuration"

# Netplan.io and resolvconf have the concept of nameservers for an
# interface (or reachable through an interface).  We will work on the
# default interface being eth0
INTERFACE=$NIC_PRIMARY

####################################################################
# Functions to modify nameserver information in each config system #
#                                                                  #
# These functions abstract accessors that were previously inline.  #
# Functions generally print results to stdout                      #
####################################################################

# Get a list of nameservers, one per line
function get_nameservers() {
  if [ "$RESOLVSYS" = "traditional" ] ; then
    awk '/^nameserver/ {print $2}' /etc/resolv.conf
  elif [ "$RESOLVSYS" = "netplan" ] ; then
    python3 -c 'import yaml;print(" ".join(yaml.load(open("/etc/netplan/rimu_nameservers.yaml").read())["network"]["ethernets"]["'$INTERFACE'"]["nameservers"]["addresses"]))' 2> /dev/null || echo
  elif [ "$RESOLVSYS" = "systemd" ] ; then
    grep 'DNS=' /etc/systemd/resolved.conf | cut -d= -f2 | tr ' ' '\n'
  else
    echo "${FUNCNAME[0]}: Resolver configuration scheme unknown or not implimented"
    exit 1
  fi
}

# Get the number of nameservers currently configured
function get_num_nameservers() {
  get_nameservers|wc --words
}

# Create a config if nothing exists
function create_if_empty() {
  if [ "$RESOLVSYS" = "traditional" ] ; then
    if [ ! -e /etc/resolv.conf  ] ; then
      touch /etc/resolv.conf
    fi
  elif [ "$RESOLVSYS" = "netplan" ] ; then
    # use a placeholder address from the bad list at the top, this will get
    # overwritten later
    if [ ! -e /etc/netplan/rimu_nameservers.yaml  ] ; then
      cat << EOF > /etc/netplan/rimu_nameservers.yaml
network:
  version: 2
  renderer: networkd
  ethernets:
    $NIC_PRIMARY:
      nameservers:
        addresses:
          - 149.112.112.112
EOF
    fi
  elif [ "$RESOLVSYS" = "systemd" ] ; then
    touch /etc/systemd/resolved.conf
  else
    echo "${FUNCNAME[0]}: Resolver configuration scheme unknown or not implimented"
    exit 1
  fi
}

# Backup the old config. uses shell expansion to copy 'a' to 'a$currentpid'
function backup_old() {
  if [ "$RESOLVSYS" = "traditional" ] ; then
    old="/etc/resolv.conf-$$"
    cp /etc/resolv.conf $old
  elif [ "$RESOLVSYS" = "netplan" ] ; then
    old="/etc/netplan/rimu_nameservers.yaml-$$"
    cp /etc/netplan/rimu_nameservers.yaml $old
  elif [ "$RESOLVSYS" = "systemd" ] ; then
    old="/etc/systemd/resolved.conf-$$"
    cp /etc/systemd/resolved.conf $old
  else
    echo "${FUNCNAME[0]}: Resolver configuration scheme unknown or not implimented"
    exit 1
  fi
}

# remove a nameserver from the config, returning success if that was removed,
# or failure if that server wasn't there.
function remove_nameserver() {
  if [ "$RESOLVSYS" = "traditional" ] ; then
    if [ $(grep -c "^nameserver $1" /etc/resolv.conf) -gt 0 ]; then
      sed s/"^nameserver $1"/"#nameserver $1"/g --in-place /etc/resolv.conf
      if [ $? -ne 0 ]; then
        exit 1
      fi
      echo "Removing $1"
    else
      return 1
    fi
  elif [ "$RESOLVSYS" = "netplan" ] ; then
    if grep -e "[[:space:]]${1}$" /etc/netplan/rimu_nameservers.yaml; then
      sed -ir "/[[:space:]]${1}$/d" /etc/netplan/rimu_nameservers.yaml
      if [ $? -ne 0 ]; then
        exit 1
      fi
      echo "Removing $1"
    else
      return 1
    fi
  elif [ "$RESOLVSYS" = "systemd" ] ; then
    if grep -e "^DNS=.*${1}.*" /etc/systemd/resolved.conf; then
      sed -ir "/[[:space:]]?${1}/d" /etc/systemd/resolved.conf
      if [ $? -ne 0 ]; then
        exit 1
      fi
      echo "Removing $1"
    else
      return 1
    fi
  else
    echo "${FUNCNAME[0]}: Resolver configuration scheme unknown or not implimented"
    exit 1
  fi
}

# add a nameserver, returning success if added, failure if it was already
# there. nameserver is added at the *end* of the current list
function add_nameserver() {
  if [ "$RESOLVSYS" = "traditional" ] ; then
    # name server already listed?
    if [ $(grep -c "^nameserver $1" /etc/resolv.conf) -gt 0 ]; then
      return 1
    fi
    # add name server
    echo "nameserver $1" >> /etc/resolv.conf
  elif [ "$RESOLVSYS" = "netplan" ] ; then
    # name server already listed?
    if grep -e "[[:space:]]${1}$" /etc/netplan/rimu_nameservers.yaml; then
      return 1
    fi
    # add name server
    echo "          - $1" >> /etc/netplan/rimu_nameservers.yaml
  elif [ "$RESOLVSYS" = "systemd" ] ; then
    # name server already listed?
    if grep -e "^DNS=.*${1}.*" /etc/systemd/resolved.conf; then
      return 1
    fi
    # add name server. for matching line, substitute end of line with the new value
    if [ $(grep '^DNS=' /etc/systemd/resolved.conf | wc --words) -gt 1 ]; then
      sed -i "/^DNS=.*$/ s/$/ ${1}/" /etc/systemd/resolved.conf
    else
      sed -i "/^DNS=.*$/ s/$/${1}/" /etc/systemd/resolved.conf
    fi
  else
    echo "${FUNCNAME[0]}: Resolver configuration scheme unknown or not implimented"
    exit 1
  fi
}

# Show changes we made, apply the changes
function show_changes() {
  if [ "$RESOLVSYS" = "traditional" ] ; then
    diff -u $old /etc/resolv.conf || rm -f $old
  elif [ "$RESOLVSYS" = "netplan" ] ; then
    if diff -u $old /etc/netplan/rimu_nameservers.yaml; then
      rm -f $old
    else
      netplan apply
    fi
  elif [ "$RESOLVSYS" = "systemd" ] ; then
    if diff -u $old /etc/systemd/resolved.conf; then
      rm -f $old
    else
      systemctl restart systemd-resolved
    fi
  else
    echo "${FUNCNAME[0]}: Resolver configuration scheme unknown or not implimented"
    exit 1
  fi
}

#####################################################
# End of abstracted functions, start of main script #
#####################################################

if [[ $EUID -ne 0 ]]; then
  echo "This script should be run as root" >&2
  exit 1
fi

create_if_empty

if ! ping -q -c 1 -W 1 8.8.8.8 >/dev/null; then
  echo "Deeming the internet to not be accessible.  Exiting." >&2
  exit 1
fi

function usage() {
  echo "$0 [--dc ny|ln|au|dl|google] [--nameservers "8.8.8.8 8.8.4.4"] [--removebad] [--help] [--[no]check]"
}

while [ -n "$1" ]; do
  case "$1" in
  --dc)
    [ $# -lt 1 ] && echo "--dc value required" >&2 && exit 1
    shift
    eval good_nameservers=\$\{${1}_nameservers\}
    echo "Using name servers for this location $1: $good_nameservers"
    ;;
  --nameservers)
    [ $# -lt 1 ] && echo "--nameserver value required" >&2 && exit 1
    shift
    good_nameservers=$1
    ;;
  --removebad)
    REMOVEBAD="Y"
    ;;
  --noremovebad)
    REMOVEBAD="N"
    ;;
  --nocheck)
    CHECK="N"
    ;;
  --check)
    CHECK="Y"
    ;;
  --help|-?)
    usage
    exit 0
    ;;
  *)
    echo "Unexpected argument $1" >&2 && exit 1
    ;;
  esac
  shift
done

known_range="unknown"
for dc in ny ln au dl ak fr; do
  [ -n "$good_nameservers" ] && break
  eval ranges=\$\{${dc}_ranges\}
  for range in $ranges; do
    if [ $(echo $IP_PRIMARY | grep -c ^$range) -gt 0 ]; then
      eval good_nameservers=\$\{${dc}_nameservers\}
      echo "Default name servers for this location $dc are $good_nameservers"
      break
    fi
  done
done
if [ -z "$good_nameservers" ]; then
  echo "Using google name servers for IP '$IP_PRIMARRY'"
  good_nameservers=$google_nameservers
fi

#echo "Default name servers for this location are $good_nameservers"
#good_nameservers=($(echo "$good_nameservers"))
#echo "Default name servers for this location are $good_nameservers"

[ -e /etc/resolv.conf ] || exit 1

backup_old

if [ "$REMOVEBAD" == "Y" ]; then
  if ! which dig >/dev/null 2>&1 ; then echo "dig not installed, exiting." >&2; exit 1; fi
  nameservers=$(get_nameservers)
  for server in $nameservers; do
    if [ $(dig @${server} +short google.com | grep -v '^;' | wc -l) -lt 1 ]; then
      bad_nameservers+=($server)
      echo "$server is not responding, will remove."
    fi
  done
fi

count=0
for ((i=0;i<${#bad_nameservers[@]};i++)); do
  ns=${bad_nameservers[$i]}
  if remove_nameserver $ns; then
    ((count++))
  fi
done

# If there is less than 2 nameservers listed in resolv.conf, and we're going to add less than 2
if [ $(get_num_nameservers) -lt 2 -a ${count} -lt 2 ]; then
  count=2
fi

for ns in $good_nameservers; do
  # need more name servers?
  if [ $count -lt 1 ]; then break; fi
  # name server working?
  if [ "Y" == "$CHECK" ] ; then
    if [ $(dig @${ns} +short google.com | grep -v '^;' | wc -l) -lt 1 ]; then
      continue;
    fi
  fi
  if add_nameserver $ns; then
    # one fewer name server needed
    ((count--))
  fi
done

for ns in 8.8.8.8 8.8.4.4
do
  if [ $(get_num_nameservers ) -lt 2 ]; then
    add_nameserver $ns
  fi
done

# show any changes.  if none remove the old file
show_changes

retcode=0
goodns=0
if [ "N" == "$CHECK" ] ; then
  echo "Skipping checks"
else
  echo "Checking your name servers:"
  nameservers=$(get_nameservers)
  for server in $nameservers; do
    if [ $(dig @${server} +short google.com | grep -v '^;' | wc -l) -lt 1 ]; then
      echo "$server in your configuration is not working.  Rerun this script with --removebad to remove that."
      ((retcode++))
      continue
    fi
	((goodns++))
    echo $server is working;
  done
fi

if [ $goodns -lt 1 ] ; then
	((retcode++))
fi
# else breaks wget script | bash
exit $retcode

#example from lenny, dont use 'host', is no longer consistent output across distros. 'dig' is better
#dcs:~# host google.com
#google.com              A       74.125.225.98
#google.com              A       74.125.225.97
#google.com              A       74.125.225.101
#google.com              A       74.125.225.110
#google.com              A       74.125.225.100
#google.com              A       74.125.225.105
#google.com              A       74.125.225.102
#google.com              A       74.125.225.103
#google.com              A       74.125.225.96
#google.com              A       74.125.225.99
#google.com              A       74.125.225.104

